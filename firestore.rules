rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---

    // Obtiene el documento de perfil del usuario que realiza la solicitud.
    function getUserProfile() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    // Verifica si el rol del usuario es 'SuperAdmin'.
    function isSuperAdmin() {
      return getUserProfile().data.role == 'SuperAdmin';
    }

    // Verifica si el orgId del usuario coincide con el orgId del documento que se está accediendo.
    // Se usa para operaciones de lectura, actualización y eliminación.
    function isMemberOfDocOrg() {
      return getUserProfile().data.orgId == resource.data.orgId;
    }

    // Verifica si el orgId del usuario coincide con el orgId del documento que se está creando.
    // Se usa para operaciones de creación.
    function isMemberOfRequestOrg() {
      return getUserProfile().data.orgId == request.resource.data.orgId;
    }

    // --- Default Rule: Deny all access ---
    // Ensures no collection is accessible unless explicitly allowed.
    match /{document=**} {
      allow read, write: if false;
    }

    // --- Public & Guest Access ---

    // Allows ANYONE (including unauthenticated visitors) to create a contact message.
    match /contactMessages/{messageId} {
      allow create: if true;
    }

    // Allows authenticated members of a chat room to interact with it.
    match /chatRooms/{roomId} {
      allow get: if request.auth != null && request.auth.uid in resource.data.memberIds;
      allow list: if request.auth != null; // Initial query is allowed, then filtered in the app.

      match /messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.memberIds;
      }
    }

    // --- User & Organization Management ---

    // Users can read their own profile. SuperAdmins can read any profile.
    // Users can update their own profile. SuperAdmins can update any profile.
    match /users/{userId} {
      allow get: if request.auth.uid == userId || isSuperAdmin();
      allow list: if isSuperAdmin();
      allow update: if request.auth.uid == userId || isSuperAdmin();
      // Create is handled by server-side logic (Genkit flows), not direct client writes.
    }

    // SuperAdmins can manage all organizations.
    // Authenticated users can read their own organization's document.
    match /organizations/{orgId} {
      allow read, write: if isSuperAdmin();
      allow get: if request.auth != null && getUserProfile().data.orgId == orgId;
    }
    
    // --- Organization-Specific Data Collections ---
    // This single rule block protects all collections that store tenant data.
    // It ensures that a user can only access data belonging to their own organization.
    match /employees/{docId} | /students/{docId} | /subjects/{docId} | /schedules/{docId} | /lessonPlans/{docId} | /invoices/{docId} | /bills/{docId} | /videoRecordings/{docId} | /grades/{docId} | /studentAttendance/{docId} | /academicPeriods/{docId} | /gradeTypes/{docId} | /gradingScales/{docId} | /chartOfAccounts/{docId} | /journalEntries/{docId} | /products/{docId} | /sales/{docId} | /warehouses/{docId} | /stockTransfers/{docId} | /payrolls/{docId} | /attendance/{docId} {
      allow read, delete: if request.auth != null && (isMemberOfDocOrg() || isSuperAdmin());
      allow create: if request.auth != null && (isMemberOfRequestOrg() || isSuperAdmin());
      allow update: if request.auth != null && (isMemberOfDocOrg() || isSuperAdmin());
    }

    // --- Global & System Collections ---

    // System settings are readable by any authenticated user but only writable by SuperAdmins.
    match /systemSettings/{settingId} {
      allow read: if request.auth != null;
      allow write: if isSuperAdmin();
    }
    
    // Active sessions might not be org-specific. Review if this needs multi-tenancy.
    // For now, keeping original logic: only authenticated users.
    match /activeSessions/{sessionId} {
      allow read, write: if request.auth != null;
    }
  }
}
